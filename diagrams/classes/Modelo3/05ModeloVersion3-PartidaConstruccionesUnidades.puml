@startuml





class Juego {

    + jugar()
}

note top of Juego
    seudocodigo:

    public void jugar(){
        Partida partida = Partida.obtenerPartida();
        partida.jugar();
    }
end note

class Partida {
     -Mapa mapa
     -turno
     - partidaActual
     - partidasGuardadas
     - Partida()
     +{static}obtenerPartida():Partida
     + jugar()

}





note top of Partida
    seudocodigo:

    public final class Partida(){
        private static Partida partida;

        private Partida(){  //constructor

            Jugador primerJugador = new Jugador();
            Jugador segundoJugador = new Jugador();
            Mapa mapa = new Mapa();
            .....
            .....
        }

        public static Partida obtenerPartida(){
            if (partida == null){
                partida= new Partida();
            }
            return partida;
        }

        public void jugar(){

            primerJugador.asignarNombre();
            segundoJugador.asignarNombre();
            ....
            ....

        }
    }
end note

class Jugador {
    - nombre
    - color
    - raza
    - puntuacion

    + Jugador()
    + jugar()
    + asignarNombre(String):void
    + asignarColor(String):void
    + asignarRaza(Raza):void


}



class App{
    +start(Stage stage)
}


Juego "1"->"1"Partida

Partida<-Partida

Partida "1" *-down->"2"Jugador

App -> Juego



note "Aplicando patron Singleton" as N2
Partida .left. N2
N2 .. Juego



interface TipoAccion{
    +{abstract}realizarAccion()

}

class Avanzar{
    +realizarAccion()
}




class Recolectar{
    +realizarAccion()
}
class Atacar{
    +realizarAccion()
}
class Construir{
    +realizarAccion()
}
class Unidad{
    +realizarAccion()

}



abstract CrearAccion{
    +{abstract}crearAccion():TipoAccion
    + realizarAccion()
}

class CrearAvanzar{
    +crearAccion():Avanzar
}
note left of CrearAvanzar
SeudoCodigo:

public class CrearAvanzar extends CrearAccion {

    @Override
    public TipoAccion crearAccion() {
        return new Avanzar();
    }
}

end note



class CrearRecolectar{
    +crearAccion():Recolectar
}
class CrearAtacar{
    +crearAccion():Atacar
}
class CrearConstruir{
    +crearAccion():Construir
}
class CrearUnidad{
    +crearAccion():Unidad
}


note right of Jugador

    public class Jugador {
        ....
        ....

        private static CrearAccion accion;

        public void jugar() {
            if (...) { // podr√≠a ser un do-while
                accion = new CrearUnidad();
            } else {
                accion = new CrearConstruir();
            }

            accion.realizarAccion();
        }

        ....
        ....
        ....
    }
end note














abstract class UnidadProtoss {
    - vida
    - escudo
    - tiempoConstruccion
    - costos
    - superficie: aire o tierra
    + construir()
    + ataque(Superficie, fila, columna)
}

class Zealot {
    +ataque()
}

class Dragon {
    +ataque()
}

class Scout {
   +ataque()

}

abstract class UnidadZerg {
    - vida
    - tiempoConstruccion
    - costos
    - superficie: aire o tierra
    + construir()
    + ataque(Superficie, fila, columna)
}

class AmoSupremo {

}

class Zangano {
    + recolectar()
}

class Zerling {
    + ataque()
}

class Hidralisco {

    +ataque()
}

class Mutalisco {
    +evolucionar()
    +ataque()
}

class Guardian {
    +ataque()
}

class Devorador {
    +ataque()
}


















abstract class Raza {
    - bancoDeRecursos
    - capacidadSuministro

    + agregarConstruccion()

}

class Zerg {
    - constuccionZerg: ConstruccionZerg
    + agregarConstruccion()

}

class Protoss {
    -constuccionProtosss: ConstruccionProtoss
    + agregarConstruccion()

}


abstract class ConstruccionZerg {
    - vida
    - tiempoConstruccion
    - costos
    + construir()
}

class Criadero {
    - moho : Radio
    - creador
    - larva : int
     +crearUnidad()
     +construir()
     +ampliarRadio()
}

class ReservaProduccion {
    - creador
    +crearUnidad()
    +construir()
}

class Extractor {
    +recolectar(volcan)
    +construir()
    +agregar(Zangano)
}

class Guarida {
    - creador
    +crearUnidad()
    +construir()

}

class Espiral {
    - creador
    +crearUnidad()
    +construir()

}

abstract class ConstruccionProtoss {
    - vida
    - escudo
    - tiempoConstruccion
    - costos
    + construir()
}

class Asimilador {
    +recolectar(volcan)
    +construir()
}

class NexoMineral {
    +recolectar(nodoMineral)
    +construir()
}

class Pilon {
    - energia : Radio
    +ampliarRadio()
    +construir()
}

class PuertoEstelar {
    - creador
    +crearUnidad()
    +construir()
}

class Acceso {
    - creador
     +crearUnidad()
     +construir()
}


interface Radio {
    +ampliarRadio()
}

class Moho {
    -radio : int
    +ampliarRadio()
}

class Energia {
    -radio : int
    +ampliarRadio()
}

interface Refineria {
    +recolectar(recurso)
}

class DeGas {
    +recolectar(volcan)
}

class DeMineral {
    +recolectar(volcan)
}

interface Creador {
    +crearZangano()
    +crearZerling()
    +crearHidralisco()
    +crearMutalisco()
    +crearZealot()
    +crearDragon()
    +crearScout()
}







TipoAccion<|.... Avanzar
TipoAccion<|..... Recolectar
TipoAccion<|....... Atacar
TipoAccion<|.up. Construir
TipoAccion<|..right.. Unidad




CrearAccion .right.> TipoAccion

CrearAccion <|-left- CrearAvanzar
CrearAccion <|--- CrearRecolectar
CrearAccion <|--- CrearAtacar
CrearAccion <|--- CrearConstruir
CrearAccion <|--- CrearUnidad


Jugador ....> CrearAccion: Aplicando patron Factory



Jugador o-left- Raza
Raza <|-- Zerg
Raza <|-- Protoss




Criadero *--> Radio
Pilon *-left-> Radio
Radio <|.. Moho
Radio <|.. Energia




Refineria <--* NexoMineral
Refineria <--* Extractor
Refineria <--* Asimilador
Refineria <|.right.. DeGas
Refineria <|.left.. DeMineral

 Creador <----* PuertoEstelar
 Creador <----* ReservaProduccion
 Creador <----* Acceso
 Creador <--right-* Guarida
 Creador <----* Criadero
 Creador <----* Espiral

Construir <|-up- ConstruccionZerg
Construir <|-up- ConstruccionProtoss
Construir <|-up- UnidadZerg
Construir <|-up- UnidadProtoss

Unidad -right-> Creador

Recolectar ---> Refineria
Recolectar -left-> Zangano


note top of Creador: Aplicando Patron Bridge
note top of Refineria: Aplicando Patron Strategy
note left of Radio: Aplicando Patron Strategy


note top of Guarida
Seudocodigo:

public class Guarida{

    public void crearUnidad(){
        creador.crearHidralisco();
    }
}
end note








Atacar --> Zerling
Atacar --> Hidralisco
Atacar --> Mutalisco
Atacar --> Guardian
Atacar --> Devorador

Atacar --> Zealot
Atacar --> Dragon
Atacar --> Scout



@enduml