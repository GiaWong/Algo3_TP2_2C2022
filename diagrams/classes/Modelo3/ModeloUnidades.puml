@startuml

interface Defensa {
    +recibirDanio(danio)
}

class Invisible {
    +recibirDanio(danio)
}

class Detectable {
    +recibirDanio(danio)
}

abstract class Unidad {
    - vida
    - tiempoConstruccion
    - costos
    - defendible
    + construir()
    +recibirDanio(danio)
}


abstract class UnidadProtoss {
    - escudo
    + construir()
    +recibirDanio(danio)
}

class Zealot {
    -atacadorTierra
    -atacadorAire
    +ataque()
}

class Dragon {
    -atacadorTierra
    -atacadorAire
    +atacar()
}

class Scout {
    -atacadorTierra
    -atacadorAire
    +atacar()

}

abstract class UnidadZerg {
    + construir()
    +recibirDanio(danio)
}

class AmoSupremo {

}

class Zangano {
    + recolectar()
}

class Zerling {
    -atacador
    + atacar()
}

class Hidralisco {
    -atacador
    +atacar()
}

class Mutalisco {
    -atacador
    +evolucionar()
    +atacar()
}

class Guardian {
    -atacador
    +atacar()
}

class Devorador {
    -atacador
    +atacar()
}

interface Atacador {
    +atacar(unidad)
    +atacar(construccion)
}

class AtaqueTierra {
    -danio
    +atacar(unidad)
    +atacar(construccion)
}

class AtaqueAire {
    -danio
    +atacar(unidad)
    +atacar(construccion)
}


interface Invisiblibilidad {
}

interface Detector {
    +detectarUnidad()
}

interface Recolector {
    +recolectar()
}

Unidad <|-- UnidadZerg
Unidad <|-- UnidadProtoss


UnidadZerg <|--- Zangano
UnidadZerg <|--- AmoSupremo
UnidadZerg <|--- Zerling
UnidadZerg <|--- Hidralisco
UnidadZerg <|--- Mutalisco
UnidadZerg <|--- Guardian
UnidadZerg <|--- Devorador

UnidadProtoss <|--- Zealot
UnidadProtoss <|--- Dragon
UnidadProtoss <|--- Scout

AmoSupremo *-- Detector

Zealot *-- Invisiblibilidad

Zerling *-- Atacador
Hidralisco *-- Atacador
Mutalisco *-- Atacador
Guardian *-- Atacador
Scout *-- Atacador
Dragon *-- Atacador
Devorador *-- Atacador
Zealot *-- Atacador

Zangano *-- Recolector

Unidad *- Defensa

Defensa <|.up. Invisible
Defensa <|.up. Detectable

Atacador <|.. AtaqueTierra
Atacador <|.. AtaqueAire


@enduml