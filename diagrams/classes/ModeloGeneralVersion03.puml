@startuml
'https://plantuml.com/class-diagram

class Juego {
    - partidaActual
    - partidasGuardadas

    + cargarPartida()
    + jugar()
}

class Partida {
    - jugadorUno
    - jugadorDos
    - mapa
    - turno

    + asignarNombre(Jugador)
    + asignarColor(Jugador)
    + asignarRaza(Jugador)
    + jugar()
    + . . .  ()
}

class Jugador {
    - nombre
    - color
    - raza

    + contruir()
    + atacar()
    + recolectar()
    + crearUnidad()
}

abstract class Raza {
    - bancoDeRecursos
    - capacidadSuministro

    + agregarConstruccion()
    + recolectar()
    + crearUnidad()
}

class Zerg {
    + agregarConstruccion()
    + recolectar()
    + crearUnidad()
}

class Protoss {
    + agregarConstruccion()
    + recolectar()
    + crearUnidad()
}

abstract class UnidadZerg {
    - vida
    - tiempoConstruccion
    - costos
    - superficie: aire o tierra
    + construir()
    + ataque(Superficie, fila, columna)
}

class AmoSupremo {

}

class Zangano {
    + recolectar()
}

class Zerling {
    + ataque()
}

class Hidralisco {

    +ataque()
}

class Mutalisco {
    +evolucionar()
    +ataque()
}

class Guardian {
    +ataque()
}

class Devorador {
    +ataque()
}

abstract class UnidadProtoss {
    - vida
    - escudo
    - tiempoConstruccion
    - costos
    - superficie: aire o tierra
    + construir()
    + ataque(Superficie, fila, columna)
}

class Zealot {
    +ataque()
}

class Dragon {
    +ataque()
}

class Scout {
   +ataque()

}

abstract class ConstruccionZerg {
    - vida
    - tiempoConstruccion
    - costos
    + construir()
}

class Criadero {
    - moho : Radio
    - creador
    - larva : int
     +crearUnidad()
     +construir()
     +ampliarRadio()
}

class ReservaProduccion {
    - creador
    +crearUnidad()
    +construir()
}

class Extractor {
    +recolectar(volcan)
    +construir()
    +agregar(Zangano)
}

class Guarida {
    - creador
    +crearUnidad()
    +construir()

}

class Espiral {
    - creador
    +crearUnidad()
    +construir()

}

abstract class ConstruccionProtoss {
    - vida
    - escudo
    - tiempoConstruccion
    - costos
    + construir()
}

class Asimilador {
    +recolectar(volcan)
    +construir()
}

class NexoMineral {
    +recolectar(nodoMineral)
    +construir()
}

class Pilon {
    - energia : Radio
    +ampliarRadio()
    +construir()
}

class PuertoEstelar {
    - creador
    +crearUnidad()
    +construir()
}

class Acceso {
    - creador
     +crearUnidad()
     +construir()
}

class Mapa {
    - mapa : Map

    + agregarUnidad()
    + agregarConstruccion()
}

class Casilla {
    - unidad
    - recurso
    - terreno
    - area
    - construccion

    + agregarUnidad()
    + agregarConstruccion()
    + setTerrreno()
    + setRecurso()
}

class Vacio {
    + esPosibleConstruir(construccion)
}

interface Terreno {
    + esPosibleConstruir(construccion)
}

interface Terreno
note left: Se aplica patr√≥n Strategy

class ConMoho {
    + esPosibleConstruir(construccion)
}

class ConEnergia {
    + esPosibleConstruir(construccion)
}

class SinNada {
    + esPosibleConstruir(construccion)
}

class Volcan {
    - cantidad
    + recolectar() : int
    + esPosibleConstruir(construccion)
}

class NodoMineral {
    - cantidad
    + recolectar() : int
    + esPosibleConstruir(construccion)
}

class Turno {

   +avanzarTurno(Jugador)
   +jugar(Jugador)

   }

interface Recurso {
    + esPosibleConstruir(construccion)
}

interface Area {
    esPosibleAgregar(unidad)
}

class Espacial {
    +esPosibleAgregar(unidad)
}

class Terrestre {
    +esPosibleAgregar(unidad)
}

interface Radio {
    +ampliarRadio()
}

class Moho {
    -radio : int
    +ampliarRadio()
}

class Energia {
    -radio : int
    +ampliarRadio()
}

interface Refineria {
    +recolectar(recurso)
}

class DeGas {
    +recolectar(volcan)
}

class DeMineral {
    +recolectar(volcan)
}

interface Creador {
    +crearZangano()
    +crearZerling()
    +crearHidralisco()
    +crearMutalisco()
    +crearZealot()
    +crearDragon()
    +crearScout()
}



Partida "2" *- Jugador
Mapa -* Partida
Partida *-- Turno

Jugador *- Raza
Raza <|-- Zerg
Raza <|-- Protoss

Zerg --> ConstruccionZerg
Protoss --> ConstruccionProtoss

ConstruccionZerg <|-- Criadero
ConstruccionZerg <|-- ReservaProduccion
ConstruccionZerg <|-- Extractor
ConstruccionZerg <|-- Guarida
ConstruccionZerg <|-- Espiral

ConstruccionProtoss <|-- NexoMineral
ConstruccionProtoss <|-- Pilon
ConstruccionProtoss <|-- Asimilador
ConstruccionProtoss <|-- Acceso
ConstruccionProtoss <|-- PuertoEstelar

Criadero *-- Radio
Pilon *-- Radio
Radio <|.. Moho
Radio <|.. Energia

NexoMineral *-- Refineria
Extractor *-- Refineria
Asimilador *-- Refineria
Refineria <|.. DeGas
Refineria <|.. DeMineral

PuertoEstelar *-- Creador
ReservaProduccion *-- Creador
Acceso *-- Creador
Guarida *-- Creador
Criadero *-- Creador
Espiral *-- Creador



Casilla "*" -* Mapa
Terreno -* Casilla

Casilla *-- Recurso
Recurso <|.. Volcan
Recurso <|.up. NodoMineral
Recurso <|.. Vacio

Terreno <|.up. ConMoho
Terreno <|.up. ConEnergia
Terreno <|.up. SinNada

UnidadZerg <|-- Zangano
UnidadZerg <|-- AmoSupremo
UnidadZerg <|-- Zerling
UnidadZerg <|-- Hidralisco
UnidadZerg <|-- Mutalisco
UnidadZerg <|-- Guardian
UnidadZerg <|-- Devorador

UnidadProtoss <-- Zealot
UnidadProtoss <-- Dragon
UnidadProtoss <-- Scout



interface Danio {
    +recibirDanio(superficie)
}
interface Superficie{
 +esPosibleAgregar(unidad)
}
class Tierra{
+esPosibleAgregar(unidad)
}
class Aire{
+esPosibleAgregar(unidad)
}

class AtaqueTierra {
    +recibirDanio(superficie)
}

class AtaqueTierraYAire {
    +recibirDanio(superficie)
}




Casilla *-- Superficie
Superficie <|.. Tierra
Superficie <|.. Aire



@enduml